// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Coach {
  id                Int      @id @default(autoincrement())
  name              String
  title             String
  image             String?
  rating            Float
  reviewCount       Int
  specialties       String
  minGroupSize      Int
  maxGroupSize      Int
  sessionLength     Int
  hourlyRate        Float
  location          String
  virtualAvailable  Boolean
  bio               String
  experience        Experience[]
  certifications    Certification[]
  reviews           Review[]
  availability      Availability[]
  ageGroups         AgeGroup[]
  bookings          Booking[]
  sessions          Session[]
}

model Experience {
  id        Int      @id @default(autoincrement())
  title     String
  company   String
  period    String
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   Int
}

model Certification {
  id        Int      @id @default(autoincrement())
  name      String
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   Int
}

model Review {
  id        Int      @id @default(autoincrement())
  name      String
  rating    Int
  date      String
  comment   String
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   Int
}

model Availability {
  id        Int      @id @default(autoincrement())
  day       String
  times     String
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   Int
}

model AgeGroup {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  focus       String
  coach       Coach    @relation(fields: [coachId], references: [id])
  coachId     Int
}

model Session {
  id                Int      @id @default(autoincrement())
  coach             Coach    @relation(fields: [coachId], references: [id])
  coachId           Int
  ageGroup          String
  subgroup          String
  date              DateTime
  time              String
  location          String
  address           String
  maxParticipants   Int
  currentParticipants Int    @default(0)
  price             Float
  focus             String
  status            String   @default("open")
  registrations     Registration[]
}

model Registration {
  id               Int      @id @default(autoincrement())
  session          Session  @relation(fields: [sessionId], references: [id])
  sessionId        Int
  playerName       String
  playerAge        Int?
  parentName       String
  parentEmail      String
  parentPhone      String
  emergencyContact String?
  emergencyPhone   String?
  medicalInfo      String?
  experience       String?
  specialNotes     String?
  createdAt        DateTime @default(now())
  cancellationToken String? @unique
  tokenExpiresAt   DateTime?
}

model Booking {
  id        Int      @id @default(autoincrement())
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  date      DateTime
  time      String
  groupSize Int
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  bookings  Booking[]
}
